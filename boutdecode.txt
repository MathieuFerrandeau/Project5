Me permet de créer une BDD

def create_database(cursor):
    try:
        cursor.execute(
            "CREATE DATABASE {} DEFAULT CHARACTER SET 'utf8'".format(DB_NAME))
    except mysql.connector.Error as err:
        print("Failed creating database: {}".format(err))
        exit(1)

try:
    cursor.execute("USE {}".format(DB_NAME))
except mysql.connector.Error as err:
    print("Database {} does not exists.".format(DB_NAME))
    if err.errno == errorcode.ER_BAD_DB_ERROR:
        create_database(cursor)
        print("Database {} created successfully.".format(DB_NAME))
        cnx.database = DB_NAME
    else:
        print(err)
        exit(1)

Créé les tables 

---

TABLES = {}
TABLES['Category'] = (
    "CREATE TABLE `Category` ("
    "  `id` smallint(3) NOT NULL AUTO_INCREMENT,"
    "  `name` varchar(50) NOT NULL,"
    "  PRIMARY KEY (`id`)"
    ") ENGINE=InnoDB")

TABLES['Product'] = (
    "CREATE TABLE `Product` ("
    "  `id` smallint(3) NOT NULL AUTO_INCREMENT,"
    "  `name` varchar(200) NOT NULL,"
    "  `store` varchar(100) NOT NULL,"
    "  `link` text NOT NULL,"
    "  `nutriscore` varchar(1) NOT NULL,"
    "  `category` smallint(3) NOT NULL,"
    "  PRIMARY KEY (`id`),"
    "  CONSTRAINT `fk_product` FOREIGN KEY (`category`) REFERENCES `Category`(`id`) ON DELETE CASCADE ON UPDATE CASCADE"
    ") ENGINE=InnoDB")

TABLES['Substitute'] = (
    "CREATE TABLE `Substitute` ("
    "  `id` smallint(3) NOT NULL AUTO_INCREMENT,"
    "  `id_product_to_substitute` smallint(3) NOT NULL,"
    "  `id_substitute_product` smallint(3) NOT NULL,"
    "  PRIMARY KEY (`id`),"
    "  CONSTRAINT `fk_substitute_product` FOREIGN KEY (`id_substitute_product`) REFERENCES `Product`(`id`) ON DELETE CASCADE ON UPDATE CASCADE,"
    "  CONSTRAINT `fk_product_to_substitute` FOREIGN KEY (`id_product_to_substitute`) REFERENCES `Product`(`id`) ON DELETE CASCADE ON UPDATE CASCADE"
    ") ENGINE=InnoDB")


for table_name in TABLES:
    table_description = TABLES[table_name]
    try:
        print("Creating table {}: ".format(table_name), end='')
        cursor.execute(table_description)
    except mysql.connector.Error as err:
        if err.errno == errorcode.ER_TABLE_EXISTS_ERROR:
            print("already exists.")
        else:
            print(err.msg)
    else:
        print("OK")

cursor.close()
cnx.close()

url openfoodfact fr

https://fr.openfoodfacts.org/categorie/viandes



-----

def get_category():
    res = requests.get("https://fr.openfoodfacts.org/categories&json=1")
    data_json = res.json()
    data_tags = data_json.get('tags')
    data_cat = [d.get('name') for d in data_tags]

    for category in data_cat[:10]:
        pass
    add_category = ("INSERT INTO Category" "(name)" "VALUES('{}')".format(category))
    cursor.execute(add_category)
    cnx.commit()
   
get_category()

---


insert a une valeur

sql = "INSERT INTO Category (name) VALUES (%s)"
#val = [('Peter',), ('rachid',)]

cursor.executemany(sql, val)
cnx.commit()"""

-----
remplit les tables a partir du fichier.sql

"""with open("createdb.sql", "r") as file:
    query = file.read()
cursor.execute(query)"""

supprr def connect db et use db 